---
import HolyText from "@components/HolyText.astro";

type Props = astroHTML.JSX.IntrinsicElements["div"] & {
  href?: string;
  target?: string;
  text?: string;
};

const { href, target, text, ...props } = Astro.props;
---

{
  Astro.locals.isMainWebsite ? (
    <a {...props} href={href} target={target}>
      {typeof text === "string" ? text : <slot />}
    </a>
  ) : (
    <span
      {...props}
      data-target={target}
      data-eclink={
        typeof href == "string"
          ? await Astro.locals.encryptText(href)
          : undefined
      }
    >
      {typeof text === "string" ? <HolyText text={text} /> : <slot />}
    </span>
  )
}
<script>
  import { holyDecrypt } from "@lib/holyDecrypt";
  import { navigate } from "astro:transitions/client";

  const parseLinks = () => {
    for (const s of document.querySelectorAll<HTMLSpanElement>(
      "[data-eclink]"
    )) {
      const eclink = s.getAttribute("data-eclink")!;
      s.removeAttribute("data-eclink");
      const href = holyDecrypt(eclink);
      const target = s.getAttribute("data-target");
      s.removeAttribute("data-target");

      s.addEventListener("mouseup", (event) => {
        if (event.button === 1) {
          event.preventDefault();
          window.open(href, "_blank");
        }
      });

      s.addEventListener("click", (event) => {
        event.preventDefault();

        if (event.ctrlKey) {
          window.open(href, "_blank");
        } else {
          if (target !== null) window.open(href, target);
          else navigate(href);
        }
      });
    }
  };
  parseLinks();
  document.addEventListener("astro:page-load", parseLinks);
</script>
