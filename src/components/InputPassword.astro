---
import styles from "@styles/Subscriber.module.scss";
import VisibilityIcon from "@icons/visibility_FILL1_wght400_GRAD0_opsz24.svg?react";
import VisibilityOffIcon from "@icons/visibility_off_FILL1_wght400_GRAD0_opsz24.svg?react";

type Props = Record<string, any> & {
  id: string;
  inline?: boolean;
  confirm?: string; // ID of another password input that will be used as the confirmation input
  validate?: boolean;
  value?: string;
};

const { id, inline, validate, confirm, value, ...props } = Astro.props;
---

<div
  class:list={[styles.passwordField, inline && styles.inline]}
  data-password
  data-validate={validate}
  data-ip
>
  <input
    {...props}
    id={id}
    type="password"
    data-confirm={confirm}
    class:list={[styles.prettyinput, styles.toggle]}
    set:html={VisibilityIcon + VisibilityOffIcon}
  />
</div>
<script>
  import { validatePassword } from "@lib/validation";

  for (const input of document.querySelectorAll<HTMLInputElement>(
    "[data-confirm]"
  )) {
    const confirmId = input.getAttribute("data-confirm");

    if (confirmId) {
      input.form!.addEventListener("submit", (event) => {
        if (input.value.trim() === "") {
          event.preventDefault();
          alert("Please enter a password");
        }
      });
    }
  }

  for (const passwordField of document.querySelectorAll("[data-ip]")) {
    const input = passwordField.querySelector("input")!;
    for (const button of passwordField.querySelectorAll(".toggle"))
      button.addEventListener("click", (e) => {
        input.type = input.type === "password" ? "text" : "password";
        e.preventDefault();
      });

    const doValidate = passwordField.hasAttribute("data-validate");
    const confirmId = passwordField.getAttribute("data-confirm");
    const confirmPassword =
      confirmId === null
        ? undefined
        : (document.getElementById(confirmId) as HTMLInputElement);

    if (confirmPassword === null)
      throw new Error(`couldn't find confirm input: ${confirmPassword}`);

    input.form!.addEventListener("submit", (event) => {
      // quickly change back to password before submit
      input.type = "password";

      if (input.value.trim() === "") {
        event.preventDefault();
        alert("Please enter a password.");
      }

      // not only is the button disabled but the input isn't valid
      if (
        confirmPassword !== undefined &&
        confirmPassword.value !== input.value
      ) {
        event.preventDefault();
        alert("Passwords do not match");
      }

      if (doValidate) {
        const error = validatePassword(input.value);

        if (error) {
          event.preventDefault();
          alert(error);
        }
      }
    });
  }
</script>
