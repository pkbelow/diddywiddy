---
import themeStyles from "@styles/ThemeElements.module.scss";
import styles from "@styles/ProxyOmnibox.module.scss";
import searchEngines from "@lib/searchEngines";
import ServiceFrame from "@components/ServiceFrame.astro";
import appDefs from "@icons/appDefs.svg?react";

const engine = searchEngines[Astro.locals.searchEngine];
---

<div
  class={styles.omnibox}
  id="omnibox"
  data-search-format={engine.format}
  transition:persist
>
  <div class={`${themeStyles.ThemeInputBar} ${styles.inputBar}`}>
    <form>
      <input
        type="text"
        placeholder={`Search ${engine.name} or type a URL`}
        autocomplete="off"
        class={themeStyles.thinPadRight}
      />
    </form>
    <button class={styles.clearButton} id="searchClear">
      <svg>
        <use href="#clearButton"></use>
      </svg>
    </button>
    <button class={styles.searchButton} id="searchIcon">
      <svg>
        <use href="#searchGlass"></use>
      </svg>
    </button>
  </div>
  <div class={styles.suggested} id="omniboxSuggest"></div>
</div>
<Fragment set:html={appDefs} />
<ServiceFrame />
<script>
  import SearchBuilder from "@lib/SearchBuilder";
  import { renderSearchResult } from "@lib/searchResult";

  document.addEventListener("astro:page-load", () => {
    const form = document.querySelector<HTMLFormElement>("#omnibox");
    if (!form) return;

    const submitOmnibox = () => {
      console.trace("submit go brr");
      let value = inputBar.value;
      if (resultIndex !== -1) {
        value = suggest.children[resultIndex].textContent!;
        console.log("erm got value", { value });
        inputBar.value = value;
      }
      if (value === "") return;
      const src = builder.query(value);
      setInputFocused(false);
      setServiceSrc(src);
    };

    form.addEventListener("submit", (event) => {
      event.preventDefault();
      submitOmnibox();
    });

    let inputFocused = false;
    let resultIndex = -1;
    // let lastQuery: string | undefined;

    const setInputFocused = (newValue: boolean) => {
      inputFocused = newValue;
      resultIndex = -1;
      if (inputFocused) {
        getSearchResults(inputBar.value);
        form.setAttribute("data-focused", "");
        document.documentElement.setAttribute("data-omnibox-focused", "");
      } else {
        inputBar.blur();
        suggest.innerHTML = "";
        form.removeAttribute("data-focused");
        form.removeAttribute("data-suggested");
        document.documentElement.removeAttribute("data-omnibox-focused");
      }
    };

    const renderOmniboxSearchResult = (result: string, query: string) => {
      const e = renderSearchResult(result, query);
      const entryClick = () => {
        const builder = new SearchBuilder(
          form.getAttribute("data-search-format")!
        );
        const src = builder.query(result);
        setInputFocused(false);
        setServiceSrc(src);
      };
      e.addEventListener("mousedown", entryClick);
      e.addEventListener("touchstart", entryClick);
      return e;
    };

    const builder = new SearchBuilder(form.getAttribute("data-search-format")!);
    const inputBar = form.querySelector<HTMLInputElement>("input")!;
    const suggest = document.querySelector<HTMLDivElement>("#omniboxSuggest")!;

    function updateResults() {
      for (let i = 0; i < suggest.children.length; i++) {
        const e = suggest.children[i];
        if (i === resultIndex) e.setAttribute("data-hover", "");
        else e.removeAttribute("data-hover");
      }
    }

    inputBar.addEventListener("keydown", (event) => {
      switch (event.code) {
        case "Escape":
          setInputFocused(false);
          break;
        case "ArrowDown":
          event.preventDefault();
          if (resultIndex === suggest.children.length - 1) resultIndex = 0;
          else resultIndex++;
          updateResults();
          break;
        case "ArrowUp":
          event.preventDefault();
          if (resultIndex <= 0) resultIndex = suggest.children.length - 1;
          else resultIndex -= 1;
          updateResults();
          break;
        case "Enter":
          event.preventDefault();
          event.stopImmediatePropagation();
          submitOmnibox();
          break;
      }
    });

    inputBar.addEventListener("input", () => {
      if (inputBar.value === "") form.removeAttribute("data-text");
      else form.setAttribute("data-text", "");
    });

    const searchClear = form.querySelector<HTMLButtonElement>("#searchClear")!;

    searchClear.addEventListener("click", (event) => {
      event.preventDefault();
      inputBar.value = "";
      form.removeAttribute("data-text");
      setInputFocused(true);
      inputBar.focus();
    });

    // allow clicking da icon
    const searchIcon = form.querySelector<HTMLButtonElement>("#searchIcon")!;

    searchIcon.addEventListener("click", (event) => {
      event.preventDefault();
      submitOmnibox();
    });

    for (const ele of [searchClear, searchIcon])
      for (const e of ["mousedown", "touchstart"])
        ele.addEventListener(e, (event) => {
          event.preventDefault();
        });

    inputBar.addEventListener("focus", () => {
      setInputFocused(true);
    });

    inputBar.addEventListener("blur", () => {
      setInputFocused(false);
    });

    // set src using search params
    // allow querying omnibox
    // eg: https://holyubofficial.net/?q=hello+world will search for "Hello World"
    const query = new URLSearchParams(location.search).get("q");
    if (typeof query === "string") {
      const newParams = new URLSearchParams(location.search);
      newParams.delete("q");
      const st = newParams.toString();
      history.replaceState(
        {},
        "",
        st === "" ? location.pathname : `${location.pathname}?${st}`
      );
      const src = builder.query(query);
      setServiceSrc(src);
    }

    let abort = new AbortController();

    const getSearchResults = async (query: string) => {
      query = query.trim();
      // lastQuery = query;
      suggest.innerHTML = "";

      if (query === "") {
        form.removeAttribute("data-suggested");
        return;
      }

      form.setAttribute("data-suggested", "");
      suggest.append(renderOmniboxSearchResult(query, query));

      // if (query === "") return;
      // if (query === lastQuery) return;

      const results: string[] = [];

      try {
        abort.abort("aborted autocomplete request because of a user input");
        abort = new AbortController();

        const body = new FormData();
        body.set("q", query);
        body.set("provider", "bing");
        const res = await fetch("/api/search", {
          method: "POST",
          body,
          signal: abort.signal,
        });
        if (!res.ok)
          throw new Error(
            `Response was not OK: ${res.status}\n${await res.text()}`
          );
        results.push(...(await res.json()));
      } catch (err) {
        console.error(err);
      }

      // render the entries and new omnibox
      // the input bar may have lost focus by the time this code is reached
      if (inputFocused)
        for (const res of results)
          if (res !== query)
            suggest.append(renderOmniboxSearchResult(res, query));
    };

    inputBar.addEventListener("input", () => {
      getSearchResults(inputBar.value);
    });

    setInputFocused(false);
  });
</script>
